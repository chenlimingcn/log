#include <cstdio>
#include <thread>
#include <unistd.h>
#include <sys/time.h>

#include <fstream>
#include <iostream>
#include <memory>
#include <vector>

using namespace std;

#include <spdlog/common.h>
#include <spdlog/spdlog.h>
#include <spdlog/async.h>
#include <spdlog/sinks/basic_file_sink.h>
#include <spdlog/sinks/rotating_file_sink.h>
#include <spdlog/sinks/stdout_sinks.h>
#include <spdlog/sinks/stdout_color_sinks.h>
#include <spdlog/sinks/daily_file_sink.h>
#include <spdlog/details/thread_pool.h>

int main(int argc, char *argv[])
{
	std::thread* thd[100] = { 0 }; 
	bool running = true;

	spdlog::init_thread_pool(8192000, 20);
	std::vector<spdlog::sink_ptr> sinks;
	auto fileSink = std::make_shared<spdlog::sinks::rotating_file_sink_mt>("spdlogtest_r.log", 1024L * 1024 * 20, 100);
	fileSink->set_level(spdlog::level::trace);
	sinks.push_back(fileSink);
	std::shared_ptr<spdlog::async_logger> logger = std::make_shared<spdlog::async_logger>("", sinks.begin(), sinks.end(), spdlog::thread_pool(), spdlog::async_overflow_policy::block);
	logger.get()->set_level(spdlog::level::trace);
	logger.get()->flush_on(spdlog::level::err);
	spdlog::flush_every(std::chrono::seconds(3));


	size_t len = 10240L * 4096;
	char *buff =  (char*)calloc(len, 1);
	thd[99] = new std::thread([&](){
		while (running)
		{
			struct timeval tv;
			gettimeofday(&tv, NULL);
			char filename[100] = { 0 };
			sprintf(filename, "%ld.raw", tv.tv_sec * 1000 + tv.tv_usec / 1000);
			FILE *file = fopen(filename, "w");
			fwrite(buff, 1, len, file);
			fclose(file);
			usleep(1000*20);
	  }
	});

	for (int i = 0; i < 10; ++i)
	{
		thd[i] = new std::thread([&](int n){
			struct timeval tv1, tv2;
			long long maxDelay = 0;
			while (running)
			{
				gettimeofday(&tv1, NULL);
				SPDLOG_LOGGER_ERROR(logger{}", n);
				gettimeofday(&tv2, NULL);
				long t = tv2.tv_sec * 1000 + tv2.tv_usec / 1000 - tv1.tv_sec * 1000 - tv1.tv_usec / 1000;
				if (t > maxDelay)
				{
					maxDelay = t;
					printf("%ld diffence %ld ms\n", tv2.tv_sec * 1000 + tv2.tv_usec / 1000, t);
				}
				usleep(1000);
			}
		}, i);
	}

	for (int i = 0; i < 3; ++i)
	{
		thd[i]->join();
	}
	return 0;
}
