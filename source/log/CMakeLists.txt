cmake_minimum_required(VERSION 3.4.0)

project(log)

set(PROJECT_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/../..)
set(BIN_PATH ${PROJECT_ROOT}/bin)
set(LIB_PATH ${PROJECT_ROOT}/lib)

SET(CMAKE_CXX_STANDARD 17)

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_ROOT}/bin)

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${LIB_PATH})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${LIB_PATH})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${BIN_PATH}) 

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${LIB_PATH})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${LIB_PATH})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${BIN_PATH}) 

set(VSIM_DEFULT_BUILD_TYPE "Release")
if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
	set(CMAKE_BUILD_TYPE ${VSIM_DEFULT_BUILD_TYPE} CACHE STRING "Set build type" FORCE)
	set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "RelWithDebInfo" "MinSizeRel")
endif()

if (BUILDTOOL_PREFIX)
	set(CMAKE_C_COMPILER "${BUILDTOOL_PREFIX}gcc")
	set(CMAKE_CXX_COMPILER "${BUILDTOOL_PREFIX}g++")
endif()
find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
  message(STATUS "Set up ccache ...")
  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
endif()

file(GLOB HEADERS ${PROJECT_ROOT}/include/log/*.h)
file(GLOB HEADERS_PRIVATE *.h)
file(GLOB SOURCES *.cpp *.c)

add_library(log ${HEADERS} ${HEADERS_PRIVATE} ${SOURCES})

add_definitions( -DNOSSL -DNOLFS -D_CRT_SECURE_NO_WARNINGS)

target_include_directories(log PUBLIC 
	${CMAKE_CURRENT_SOURCE_DIR}
	${PROJECT_ROOT}/include
)

target_link_directories(log PUBLIC
    ${PROJECT_ROOT}/lib
)

if (NOT WIN32)
	set(THREADS_PREFER_PTHREAD_FLAG ON)
	find_package(Threads REQUIRED)
	target_link_libraries(log PUBLIC
		rt
		Threads::Threads
	)
else()
	target_link_libraries(log PUBLIC
		ws2_32.lib
	)
endif()

install(TARGETS log
	RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
	ARCHIVE DESTINATION "${CMAKE_INSTALL_PREFIX}/lib"
	LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/lib" )

install(FILES ${HEADERS} DESTINATION "${CMAKE_INSTALL_PREFIX}/include/log")
